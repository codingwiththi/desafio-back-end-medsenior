openapi: 3.0.3
info:
  title: MedSenior AI Q&A API
  version: 1.0.0
  description: API para perguntas e respostas com isolamento multi-tenant.
servers:
  - url: http://localhost:3000
paths:
  /api/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
  /api/auth/register:
    post:
      summary: Registrar usuário e empresa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name, companyName]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
                companyName: { type: string }
      responses:
        '201': { description: Created }
        '400': { description: Bad Request }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/auth/refresh:
    post:
      summary: Renovar token de acesso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/questions:
    post:
      summary: Fazer pergunta à IA
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question]
              properties:
                question: { type: string }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
  /api/questions/my-questions:
    get:
      summary: Listar perguntas do usuário
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/questions/company:
    get:
      summary: Listar perguntas da empresa (admin)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/admin/stats/questions:
    get:
      summary: Estatísticas de perguntas
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: days
          schema: { type: integer, default: 30 }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/admin/stats/users:
    get:
      summary: Top usuários por perguntas
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
