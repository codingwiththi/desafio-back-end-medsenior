// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    // Ensure the correct engine is available in the container runtime
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Company {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    users     User[]
    questions Question[]

    @@map("companies")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String
    name      String
    role      UserRole @default(USER)
    companyId String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    company   Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
    questions Question[]
    tokens    RefreshToken[]

    @@map("users")
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    expiresAt DateTime
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("refresh_tokens")
}

model Question {
    id        String   @id @default(cuid())
    question  String
    answer    String
    userId    String
    companyId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@map("questions")
}

enum UserRole {
    USER
    ADMIN
}
